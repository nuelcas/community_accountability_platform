{"ast":null,"code":"// import React from \"react\";\n// import { Navigate } from \"react-router-dom\";\n// import { useAuth } from \"../context/AuthContext\"; // Ensure this path is correct\n// const ProtectedRoute = ({ children }) => {\n//   const { user } = useAuth(); // Get the user from AuthContext\n//   if (!user) {\n//     // If the user is not authenticated, redirect to login\n//     return <Navigate to=\"/login\" replace />;\n//   }\n//   // If authenticated, render the children (the protected component)\n//   return children;\n// };\n// export default ProtectedRoute;\nimport React,{useEffect}from\"react\";import{Navigate}from\"react-router-dom\";import{useAuth}from\"../context/AuthContext\";// Make sure this path is correct\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,onAccess}=_ref;const{user}=useAuth();// Check user authentication from AuthContext\nconst token=localStorage.getItem(\"authToken\");// Check for token in localStorage\nuseEffect(()=>{// If token exists and onAccess function is provided, call it\nif(token&&onAccess){onAccess();}},[token,onAccess]);// Make sure this runs when the token or onAccess function changes\nif(!user||!token){// If no user or no token is found, redirect to login\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});}// If both user is authenticated and token exists, render the protected component\nreturn children;};export default ProtectedRoute;","map":{"version":3,"names":["React","useEffect","Navigate","useAuth","jsx","_jsx","ProtectedRoute","_ref","children","onAccess","user","token","localStorage","getItem","to","replace"],"sources":["C:/cap/src/components/ProtectedRoute.js"],"sourcesContent":["// import React from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n// import { useAuth } from \"../context/AuthContext\"; // Ensure this path is correct\r\n\r\n// const ProtectedRoute = ({ children }) => {\r\n//   const { user } = useAuth(); // Get the user from AuthContext\r\n\r\n//   if (!user) {\r\n//     // If the user is not authenticated, redirect to login\r\n//     return <Navigate to=\"/login\" replace />;\r\n//   }\r\n\r\n//   // If authenticated, render the children (the protected component)\r\n//   return children;\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../context/AuthContext\"; // Make sure this path is correct\r\n\r\nconst ProtectedRoute = ({ children, onAccess }) => {\r\n  const { user } = useAuth(); // Check user authentication from AuthContext\r\n  const token = localStorage.getItem(\"authToken\"); // Check for token in localStorage\r\n\r\n  useEffect(() => {\r\n    // If token exists and onAccess function is provided, call it\r\n    if (token && onAccess) {\r\n      onAccess();\r\n    }\r\n  }, [token, onAccess]); // Make sure this runs when the token or onAccess function changes\r\n\r\n  if (!user || !token) {\r\n    // If no user or no token is found, redirect to login\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  // If both user is authenticated and token exists, render the protected component\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,OAASC,OAAO,KAAQ,wBAAwB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAElD,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAA4B,IAA3B,CAAEC,QAAQ,CAAEC,QAAS,CAAC,CAAAF,IAAA,CAC5C,KAAM,CAAEG,IAAK,CAAC,CAAGP,OAAO,CAAC,CAAC,CAAE;AAC5B,KAAM,CAAAQ,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAE;AAEjDZ,SAAS,CAAC,IAAM,CACd;AACA,GAAIU,KAAK,EAAIF,QAAQ,CAAE,CACrBA,QAAQ,CAAC,CAAC,CACZ,CACF,CAAC,CAAE,CAACE,KAAK,CAAEF,QAAQ,CAAC,CAAC,CAAE;AAEvB,GAAI,CAACC,IAAI,EAAI,CAACC,KAAK,CAAE,CACnB;AACA,mBAAON,IAAA,CAACH,QAAQ,EAACY,EAAE,CAAC,QAAQ,CAACC,OAAO,MAAE,CAAC,CACzC,CAEA;AACA,MAAO,CAAAP,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}