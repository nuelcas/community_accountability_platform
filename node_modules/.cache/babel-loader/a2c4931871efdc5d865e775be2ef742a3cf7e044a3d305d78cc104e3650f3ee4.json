{"ast":null,"code":"// import React, { createContext, useState, useEffect, useContext } from \"react\";\n// export const AuthContext = createContext();\n// // Create a custom hook to use the AuthContext\n// export const useAuth = () => {\n//   return useContext(AuthContext);\n// };\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null); // null indicates not logged in\n//   // Check if the user is authenticated (for example, using localStorage)\n//   useEffect(() => {\n//     const loggedUser = JSON.parse(localStorage.getItem(\"user\")); // Ensure \"user\" matches the key used in localStorage\n//     if (loggedUser) {\n//       setUser(loggedUser);\n//     }\n//   }, []);\n//   const login = (userData) => {\n//     setUser(userData);\n//     localStorage.setItem(\"user\", JSON.stringify(userData)); // Save user data\n//   };\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem(\"user\"); // Remove user data\n//   };\n//   return (\n//     <AuthContext.Provider value={{ user, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n// import React, { createContext, useState, useEffect, useContext } from \"react\";\n// export const AuthContext = createContext();\n// // Custom hook to use the AuthContext\n// export const useAuth = () => {\n//   return useContext(AuthContext);\n// };\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   useEffect(() => {\n//     const loggedUser = JSON.parse(localStorage.getItem(\"user\"));\n//     if (loggedUser) {\n//       setUser(loggedUser);\n//     }\n//   }, []);\n//   const login = (userData) => {\n//     setUser(userData);\n//     localStorage.setItem(\"user\", JSON.stringify(userData));\n//   };\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"authToken\"); // Also remove the token on logout\n//   };\n//   return (\n//     <AuthContext.Provider value={{ user, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\nimport React,{createContext,useState,useEffect}from\"react\";// Create the AuthContext\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);useEffect(()=>{// Safely retrieve user data from localStorage\nconst storedUser=localStorage.getItem(\"user\");// Only parse if the user data is not undefined or null\nif(storedUser){try{setUser(JSON.parse(storedUser));}catch(error){console.error(\"Error parsing user data from localStorage\",error);}}},[]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,setUser},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","storedUser","localStorage","getItem","JSON","parse","error","console","Provider","value"],"sources":["C:/cap/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect, useContext } from \"react\";\r\n\r\n// export const AuthContext = createContext();\r\n\r\n// // Create a custom hook to use the AuthContext\r\n// export const useAuth = () => {\r\n//   return useContext(AuthContext);\r\n// };\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null); // null indicates not logged in\r\n\r\n//   // Check if the user is authenticated (for example, using localStorage)\r\n//   useEffect(() => {\r\n//     const loggedUser = JSON.parse(localStorage.getItem(\"user\")); // Ensure \"user\" matches the key used in localStorage\r\n//     if (loggedUser) {\r\n//       setUser(loggedUser);\r\n//     }\r\n//   }, []);\r\n\r\n//   const login = (userData) => {\r\n//     setUser(userData);\r\n//     localStorage.setItem(\"user\", JSON.stringify(userData)); // Save user data\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"user\"); // Remove user data\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// import React, { createContext, useState, useEffect, useContext } from \"react\";\r\n\r\n// export const AuthContext = createContext();\r\n\r\n// // Custom hook to use the AuthContext\r\n// export const useAuth = () => {\r\n//   return useContext(AuthContext);\r\n// };\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const loggedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n//     if (loggedUser) {\r\n//       setUser(loggedUser);\r\n//     }\r\n//   }, []);\r\n\r\n//   const login = (userData) => {\r\n//     setUser(userData);\r\n//     localStorage.setItem(\"user\", JSON.stringify(userData));\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"authToken\"); // Also remove the token on logout\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\nimport React, { createContext, useState, useEffect } from \"react\";\r\n\r\n// Create the AuthContext\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Safely retrieve user data from localStorage\r\n    const storedUser = localStorage.getItem(\"user\");\r\n\r\n    // Only parse if the user data is not undefined or null\r\n    if (storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (error) {\r\n        console.error(\"Error parsing user data from localStorage\", error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, setUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAEjE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,MAAO,MAAM,CAAAC,WAAW,cAAGL,aAAa,CAAC,CAAC,CAE1C,MAAO,MAAM,CAAAM,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAEtCC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAS,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAE/C;AACA,GAAIF,UAAU,CAAE,CACd,GAAI,CACFD,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC,CACjC,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,CAAEA,KAAK,CAAC,CACnE,CACF,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEZ,IAAA,CAACC,WAAW,CAACa,QAAQ,EAACC,KAAK,CAAE,CAAEV,IAAI,CAAEC,OAAQ,CAAE,CAAAF,QAAA,CAC5CA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}