{"ast":null,"code":"// import React, { useEffect } from \"react\";\n// import { Navigate } from \"react-router-dom\";\n// import { useAuth } from \"../context/AuthContext\"; // Ensure this path is correct\n// const ProtectedRoute = ({ children, onAccess }) => {\n//   const { user } = useAuth(); // Check user authentication from AuthContext\n//   const token = localStorage.getItem(\"authToken\"); // Check for token in localStorage\n//   useEffect(() => {\n//     if (user && token && onAccess) {\n//       onAccess(); // Fetch protected data if user and token exist\n//     }\n//   }, [user, token, onAccess]);\n//   if (!user || !token) {\n//     return <Navigate to=\"/login\" replace />; // Redirect to login if not authenticated\n//   }\n//   return children; // Render the protected route component if authenticated\n// };\n// export default ProtectedRoute;\nimport React from\"react\";import{Navigate}from\"react-router-dom\";import{useAuth}from\"../context/AuthContext\";import{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children}=_ref;const{user}=useAuth();const token=localStorage.getItem(\"authToken\");if(!user||!token){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});// Redirect to login if not authenticated\n}return children;// Render the protected route component if authenticated\n};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useAuth","jsx","_jsx","ProtectedRoute","_ref","children","user","token","localStorage","getItem","to","replace"],"sources":["C:/cap/src/components/ProtectedRoute.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n// import { useAuth } from \"../context/AuthContext\"; // Ensure this path is correct\r\n\r\n// const ProtectedRoute = ({ children, onAccess }) => {\r\n//   const { user } = useAuth(); // Check user authentication from AuthContext\r\n//   const token = localStorage.getItem(\"authToken\"); // Check for token in localStorage\r\n\r\n//   useEffect(() => {\r\n//     if (user && token && onAccess) {\r\n//       onAccess(); // Fetch protected data if user and token exist\r\n//     }\r\n//   }, [user, token, onAccess]);\r\n\r\n//   if (!user || !token) {\r\n//     return <Navigate to=\"/login\" replace />; // Redirect to login if not authenticated\r\n//   }\r\n\r\n//   return children; // Render the protected route component if authenticated\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n\r\nimport React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const { user } = useAuth();\r\n  const token = localStorage.getItem(\"authToken\");\r\n\r\n  if (!user || !token) {\r\n    return <Navigate to=\"/login\" replace />; // Redirect to login if not authenticated\r\n  }\r\n\r\n  return children; // Render the protected route component if authenticated\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,OAASC,OAAO,KAAQ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEjD,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClC,KAAM,CAAEE,IAAK,CAAC,CAAGN,OAAO,CAAC,CAAC,CAC1B,KAAM,CAAAO,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAE/C,GAAI,CAACH,IAAI,EAAI,CAACC,KAAK,CAAE,CACnB,mBAAOL,IAAA,CAACH,QAAQ,EAACW,EAAE,CAAC,QAAQ,CAACC,OAAO,MAAE,CAAC,CAAE;AAC3C,CAEA,MAAO,CAAAN,QAAQ,CAAE;AACnB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}